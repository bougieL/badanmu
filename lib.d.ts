/** Declaration file generated by dts-gen */

declare namespace lib {
    class List {
        constructor(...args: any[]);

        push(...args: any[]): void;

    }

    const TafMx: {
        UriMapping: {
            "1002": any;
            "1003": any;
            "1005": any;
            "1400": any;
            "6052": any;
            "6110": any;
            "6200": any;
            "6210": any;
            "6220": any;
            "6221": any;
            "6230": any;
            "6231": any;
            "6232": any;
            "6233": any;
            "6234": any;
            "6250": any;
            "6501": any;
            "8006": any;
        };
        WupMapping: {
            OnUserEvent: any;
            OnUserHeartBeat: any;
            consumeGift: any;
            consumeGiftSafe: any;
            doLaunch: any;
            getLivingInfo: any;
            getPropsList: any;
            getSequence: any;
            sendMessage: any;
            speak: any;
            videoGatewayProxy2VGPing: any;
        };
        WupMappingReq: {
            consumeGift: any;
            getSequence: any;
        };
    };

    namespace HUYA {
        class ACEnterBanner {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class AdvanceUserEnterNotice {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class AttendeeCountNotice {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class AuditorEnterLiveNotice {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class AuditorRoleChangeNotice {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class AwardBoxPrizeReq {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class AwardBoxPrizeRsp {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class BadgeInfo {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class BadgeInfoListReq {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class BadgeInfoListRsp {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class BadgeReq {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class BadgeScoreChanged {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class BatchGetCdnTokenReq {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class BatchGetCdnTokenRsp {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class BeginLiveNotice {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class BoxTaskInfo {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class BulletFormat {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class CdnAntiCodeInfo {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class ChannelPair {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class ConsumeGiftReq {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class ConsumeGiftRsp {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class ConsumeGiftSafeReq {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class ConsumeGiftSafeRsp {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class ContentFormat {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class DBUserInfo {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class DecorationInfo {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class DecorationInfoRsp {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class Dimension {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class DisplayInfo {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class EndLiveNotice {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class EnterChannelReq {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class EnterPushInfo {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class ExternalUser {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class FansInfo {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class FansInfoNotice {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class FansItem {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class FansRankItem {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class FansRankListRsp {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class FansTips {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class FinishTaskNoticeReq {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class FinishTaskNoticeRsp {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class GameAdvertisement {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class GetCdnTokenReq {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class GetCdnTokenRsp {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class GetFirstRechargePkgStatusReq {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class GetFirstRechargePkgStatusResp {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class GetLivingInfoReq {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class GetLivingInfoRsp {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class GetPropsListReq {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class GetPropsListRsp {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class GetSequenceReq {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class GetSequenceRsp {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class GetUserBoxInfoReq {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class GetUserBoxInfoRsp {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class GetVerificationStatusReq {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class GetVerificationStatusResp {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class GetWebdbUserInfoReq {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class GetWebdbUserInfoRsp {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class GiftInfo {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class GrandCeremonyChampionPresenter {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class GuardInfo {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class InterveneCountInfo {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class InterveneCountRsp {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class ItemEffectInfo {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class JumpLiveEventReq {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class LiveAppUAEx {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class LiveLaunchReq {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class LiveLaunchRsp {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class LiveListRsp {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class LiveProxyValue {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class LiveUserbase {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class MassItem {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class MessageNotice {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class MessageTagInfo {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class Metric {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class MetricSet {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class MultiStreamInfo {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class MuteRoomUserReq {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class MuteRoomUserRsp {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class NobleBase {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class NobleEnterNotice {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class NobleInfo {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class NobleInfoReq {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class NobleInfoRsp {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class NobleItem {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class NobleLevelInfo {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class NobleSpeakBrst {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class NobleSpeakReq {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class NobleSpeakResp {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class PropView {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class PropsIdentity {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class PropsItem {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class SendCardPackageItemReq {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class SendCardPackageItemRsp {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class SendItemNoticeWordBroadcastPacket {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class SendItemSubBroadcastPacket {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class SendMessageReq {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class SendMessageRsp {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class SenderInfo {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class SenderItem {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class SpecialInfo {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class StampItem {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class StatsSet {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class StreamInfo {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class StreamSettingNotice {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class StreamerNode {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class TokenCdnInfo {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class UidNickName {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class UserChannelReq {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class UserEventReq {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class UserEventRsp {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class UserGiftNotice {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class UserHeartBeatReq {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class UserHeartBeatRsp {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class UserId {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class UserIdentityInfo {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class VideoGatewayProxy2VGPingReq {
            constructor();

            readFrom(e: any): void;

            writeTo(e: any): void;

        }

        class VideoGatewayProxy2VGPingRsp {
            constructor();

            readFrom(e: any): void;

            writeTo(e: any): void;

        }

        class VipBarItem {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class VipBarListRsp {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class VipCardReq {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class VipEnterBanner {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class VipListReq {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class VipSmileItem {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class WSEnterP2PAck {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class WSExitP2PAck {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class WSHeartBeat {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class WSMsgItem {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class WSPushMessage {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class WSPushMessage_V2 {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class WSRegisterGroupReq {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class WSRegisterRsp {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class WSUserInfo {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class WSVerifyCookieReq {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class WSVerifyCookieRsp {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class WebSocketCommand {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class WeekRankEnterBanner {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class WeekRankInfo {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class WeekRankItem {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class WeekRankListReq {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        class WeekRankListRsp {
            constructor();

            readFrom(t: any): void;

            writeTo(t: any): void;

        }

        const EClientTemplateType: {
            TPL_HUYAAPP: number;
            TPL_JIEDAI: number;
            TPL_MATCH: number;
            TPL_MIRROR: number;
            TPL_PC: number;
            TPL_TEXAS: number;
            TPL_WEB: number;
        };

        const EGender: {
            FEMALE: number;
            MALE: number;
        };

        const ELiveSource: {
            MOBILE_HUYA: number;
            PC_HUYA: number;
            PC_YY: number;
            WEB_HUYA: number;
        };

        const EStreamLineType: {
            STREAM_LINE_AL: number;
            STREAM_LINE_HUYA: number;
            STREAM_LINE_NEW_YY: number;
            STREAM_LINE_OLD_YY: number;
            STREAM_LINE_WS: number;
        };

        const EUnit: {
            EUnit_Bits: number;
            EUnit_BitsPerSecond: number;
            EUnit_Bytes: number;
            EUnit_BytesPerSecond: number;
            EUnit_Count: number;
            EUnit_CountPerSecond: number;
            EUnit_Gigabits: number;
            EUnit_GigabitsPerSecond: number;
            EUnit_Gigabytes: number;
            EUnit_GigabytesPerSecond: number;
            EUnit_Kilobits: number;
            EUnit_KilobitsPerSecond: number;
            EUnit_Kilobytes: number;
            EUnit_KilobytesPerSecond: number;
            EUnit_Megabits: number;
            EUnit_MegabitsPerSecond: number;
            EUnit_Megabytes: number;
            EUnit_MegabytesPerSecond: number;
            EUnit_Microseconds: number;
            EUnit_Milliseconds: number;
            EUnit_None: number;
            EUnit_Percent: number;
            EUnit_Seconds: number;
            EUnit_Terabits: number;
            EUnit_TerabitsPerSecond: number;
            EUnit_Terabytes: number;
            EUnit_TerabytesPerSecond: number;
        };

        const EWebSocketCommandType: {
            EWSCmdC2S_DeregisterReq: number;
            EWSCmdC2S_HeartBeat: number;
            EWSCmdC2S_HeartBeatReq: number;
            EWSCmdC2S_RegisterGroupReq: number;
            EWSCmdC2S_SyncGroupReq: number;
            EWSCmdC2S_UNVerifyReq: number;
            EWSCmdC2S_UnRegisterGroupReq: number;
            EWSCmdC2S_UpdateUserExpsReq: number;
            EWSCmdC2S_UpdateUserInfoReq: number;
            EWSCmdC2S_VerifyCookieReq: number;
            EWSCmdC2S_VerifyHuyaTokenReq: number;
            EWSCmdC2S_WSHistoryMsgReq: number;
            EWSCmdS2C_DeRegisterRsp: number;
            EWSCmdS2C_EnterP2P: number;
            EWSCmdS2C_EnterP2PAck: number;
            EWSCmdS2C_ExitP2P: number;
            EWSCmdS2C_ExitP2PAck: number;
            EWSCmdS2C_HeartBeatAck: number;
            EWSCmdS2C_HeartBeatRsp: number;
            EWSCmdS2C_MsgPushReq: number;
            EWSCmdS2C_MsgPushReq_V2: number;
            EWSCmdS2C_RegisterGroupRsp: number;
            EWSCmdS2C_SyncGroupRsp: number;
            EWSCmdS2C_UNVerifyRsp: number;
            EWSCmdS2C_UnRegisterGroupRsp: number;
            EWSCmdS2C_UpdateUserExpsRsp: number;
            EWSCmdS2C_UpdateUserInfoRsp: number;
            EWSCmdS2C_VerifyCookieRsp: number;
            EWSCmdS2C_VerifyHuyaTokenRsp: number;
            EWSCmdS2C_WSHistoryMsgRsp: number;
            EWSCmd_NULL: number;
            EWSCmd_RegisterReq: number;
            EWSCmd_RegisterRsp: number;
            EWSCmd_WupReq: number;
            EWSCmd_WupRsp: number;
        };

        const TemplateType: {
            PRIMARY: number;
            RECEPTION: number;
        };

        const eUserOperation: {
            USER_IN: number;
            USER_MOVE: number;
            USER_OUT: number;
        };

    }

    namespace Taf {
        class BinBuffer {
            constructor(t: any);

            allocate(t: any): void;

            getBuffer(): any;

            memset(t: any, e: any, i: any): void;

            readBytes(t: any): any;

            readDouble(): any;

            readFloat(): any;

            readInt16(): any;

            readInt32(): any;

            readInt64(): any;

            readInt8(): any;

            readString(t: any): any;

            readUInt16(): any;

            readUInt32(): any;

            readUInt8(): any;

            writeBytes(t: any): void;

            writeDouble(t: any): void;

            writeFloat(t: any): void;

            writeInt16(t: any): void;

            writeInt32(t: any): void;

            writeInt64(t: any): void;

            writeInt8(t: any): void;

            writeString(t: any): void;

            writeUInt16(t: any): void;

            writeUInt32(t: any): void;

            writeUInt8(t: any): void;

        }

        class JceInputStream {
            constructor(t: any);

            peekFrom(): any;

            readBoolean(t: any, e: any, i: any): any;

            readBytes(t: any, e: any, i: any): any;

            readDouble(t: any, e: any, i: any): any;

            readFloat(t: any, e: any, i: any): any;

            readFrom(): any;

            readInt16(t: any, e: any, i: any): any;

            readInt32(t: any, e: any, i: any): any;

            readInt64(t: any, e: any, i: any): any;

            readInt8(t: any, e: any, i: any): any;

            readMap(t: any, e: any, i: any): any;

            readString(t: any, e: any, i: any): any;

            readString2(t: any, e: any, i: any): any;

            readStruct(t: any, e: any, i: any): any;

            readUInt16(t: any, e: any, i: any): any;

            readUInt32(t: any, e: any, i: any): any;

            readUInt8(t: any, e: any, i: any): any;

            readVector(t: any, e: any, i: any): any;

            skipField(t: any): void;

            skipToStructEnd(): void;

            skipToTag(t: any, e: any): any;

        }

        class JceOutputStream {
            constructor();

            writeBoolean(t: any, e: any): void;

            writeBytes(t: any, e: any): void;

            writeDouble(t: any, e: any): void;

            writeFloat(t: any, e: any): void;

            writeInt16(t: any, e: any): void;

            writeInt32(t: any, e: any): void;

            writeInt64(t: any, e: any): void;

            writeInt8(t: any, e: any): void;

            writeMap(t: any, e: any): void;

            writeString(t: any, e: any): void;

            writeStruct(t: any, e: any): void;

            writeTo(t: any, e: any): void;

            writeUInt16(t: any, e: any): void;

            writeUInt32(t: any, e: any): void;

            writeUInt8(t: any, e: any): void;

            writeVector(t: any, e: any): void;

        }

        class Map {
            constructor(t: any, e: any);

            clear(): void;

            get(t: any): any;

            put(t: any, e: any): void;

            remove(t: any): void;

            size(): any;

        }

        class Vector {
            constructor(t: any);

        }

        class Wup {
            constructor();

            decode(t: any): void;

            encode(): any;

            getRequestId(): any;

            getTimeOut(): any;

            getVersion(): any;

            readBoolean(t: any): any;

            readBytes(t: any, e: any, i: any): any;

            readDouble(t: any): any;

            readFloat(t: any): any;

            readFrom(t: any): void;

            readInt16(t: any): any;

            readInt32(t: any): any;

            readInt64(t: any): any;

            readInt8(t: any): any;

            readMap(t: any, e: any, i: any): any;

            readStruct(t: any, e: any, i: any): any;

            readVector(t: any, e: any, i: any): any;

            setFunc(t: any): void;

            setRequestId(t: any): void;

            setServant(t: any): void;

            setTimeOut(t: any): void;

            setVersion(t: any): void;

            writeBoolean(t: any, e: any): void;

            writeBytes(t: any, e: any): void;

            writeDouble(t: any, e: any): void;

            writeFloat(t: any, e: any): void;

            writeInt16(t: any, e: any): void;

            writeInt32(t: any, e: any): void;

            writeInt64(t: any, e: any): void;

            writeInt8(t: any, e: any): void;

            writeMap(t: any, e: any): void;

            writeString(t: any, e: any): void;

            writeStruct(t: any, e: any): void;

            writeTo(): any;

            writeVector(t: any, e: any): void;

        }

        const DataHelp: {
            EN_DOUBLE: number;
            EN_FLOAT: number;
            EN_INT16: number;
            EN_INT32: number;
            EN_INT64: number;
            EN_INT8: number;
            EN_LIST: number;
            EN_MAP: number;
            EN_SIMPLELIST: number;
            EN_STRING1: number;
            EN_STRING4: number;
            EN_STRUCTBEGIN: number;
            EN_STRUCTEND: number;
            EN_ZERO: number;
        };

        const TypeHelp: {
            BOOLEAN: string;
            CHAR: string;
            DOUBLE: string;
            FLOAT: string;
            INT32: string;
            INT64: string;
            MAP: string;
            SHORT: string;
            STRING: string;
            VECTOR: string;
        };

        function BOOLEAN(): any;

        function Double(): any;

        function ENUM(): any;

        function Float(): any;

        function INT16(): any;

        function INT32(): any;

        function INT64(): any;

        function INT8(): any;

        function STRING(): any;

        function UINT8(): any;

        function UInt16(): any;

        function UInt32(): any;

        namespace Util {
            function ajax(t: any, e: any, i: any, r: any): void;

            function jcestream(t: any): void;

            function str2ab(t: any): any;

        }

    }

}

